<?xml version="1.0" encoding="utf-8"?>
<test>

<name>ranker internals (PACKEDFACTORS(), different IDF variants, etc)</name>

<config>
indexer
{
	mem_limit		= 16M
}

searchd
{
	<searchd_settings/>
}

source test
{
	type			= mysql
	<sql_settings/>
	sql_query		= select * from test_table
	sql_attr_uint	= gid
}

index test
{
	source			= test
	path			= <data_path/>/test
	index_field_lengths	= 1
}

index test_stop
{
	source			= test
	path			= <data_path/>/test_stop
	stopwords = <test_root/>/stopwords.txt
}

source test1
{
	type			= mysql
	<sql_settings/>
	sql_query		= select id+10 as id, gid + 10 as gid, title from test_table
	sql_attr_uint	= gid
}

index test1
{
	source			= test1
	path			= <data_path/>/test1
}

index rt1
{
	type			= rt
	path			= <data_path/>/rt1
	rt_field		= f1	
	rt_attr_uint 	= gid

	dict			= keywords
    charset_table	= english, russian    
}

</config>

<db_create>
CREATE TABLE test_table
(
	id INTEGER PRIMARY KEY NOT NULL,
	gid INTEGER NOT NULL,
	title VARCHAR(255) NOT NULL
);
</db_create>
<db_drop>DROP TABLE IF EXISTS test_table;</db_drop>
<db_insert>INSERT INTO test_table VALUES
( 1, 123, 'THE document collection. Aiming for exactly 10 docs.' ),
( 2, 123, 'the idftest2' ),
( 3, 123, 'the idftest2 and idftest1' ),
( 4, 123, 'the' ),
( 5, 123, 'the' ),
( 6, 123, 'the' ),
( 7, 123, 'the' ),
( 8, 123, 'the' ),
( 9, 123, 'the' ),
( 10, 123, 'the' )
</db_insert>

<queries><sphinxql>
select *, weight(), packedfactors() from test where match('the') option ranker=expr('1000000+1000000*sum(sum_idf)');
select *, weight(), packedfactors() from test where match('the') option idf=plain, ranker=expr('1000000+1000000*sum(sum_idf)');
select *, weight(), packedfactors() from test where match('idftest1') option idf=normalized, ranker=expr('1000000+1000000*sum(sum_idf)');
select *, weight(), packedfactors() from test where match('idftest1') option idf=plain, ranker=expr('1000000+1000000*sum(sum_idf)');
select *, weight(), packedfactors() from test where match('idftest1') option idf='plain,tfidf_unnormalized', ranker=expr('1000000+1000000*sum(sum_idf)');
select *, weight(), packedfactors() from test where match('idftest1 | fnord') option idf=normalized, ranker=expr('1000000+1000000*sum(sum_idf)');
select *, weight(), packedfactors() from test where match('idftest1 | fnord') option idf=plain, ranker=expr('1000000+1000000*sum(sum_idf)');
select *, weight(), packedfactors() from test where match('idftest1 | fnord') option idf='plain,tfidf_unnormalized', ranker=expr('1000000+1000000*sum(sum_idf)');
<!-- regression heavy factors got enabed along with packedfactors -->
select *, weight(), packedfactors() from test where match('idftest1 the') option idf='plain,tfidf_unnormalized', ranker=expr('1');
select *, weight(), packedfactors() from test where match('and idftest1 the') option idf='plain,tfidf_unnormalized', ranker=expr('1');
select *, weight(), packedfactors() from test where match('the idftest1') option idf='plain,tfidf_unnormalized', ranker=expr('1');
select *, weight(), packedfactors() from test where match('the and idftest1') option idf='plain,tfidf_unnormalized', ranker=expr('1');

<!-- packedfactors with json output -->
select *, weight(), factors({json=1}) from test where match('idftest1 the') option idf='plain,tfidf_unnormalized', ranker=expr('1');
select *, weight(), packedfactors({json=1}) from test where match('and idftest1 the')  option idf='plain,tfidf_unnormalized', ranker=expr('1');
select *, weight(), factors({json=1}) from test where match('the idftest1')  option idf='plain,tfidf_unnormalized', ranker=expr('1');
select *, weight(), packedfactors({json=1}) from test where match('the and idftest1')  option idf='plain,tfidf_unnormalized', ranker=expr('1');
select *, weight(), packedfactors({json=1}) from test_stop where match('the and idftest1')  option idf='plain,tfidf_unnormalized', ranker=expr('1');

<!-- regression crash of daemon witn ranker=none to distributed index \ multiple indexes -->
SELECT gid FROM test,test1 GROUP BY gid OPTION ranker=none;

<!-- regression crash of daemon on factors at RAM segments of RT index -->
<!-- each INSERT should go into its own segment  -->
INSERT INTO rt1 (id,f1) VALUES (1,'Автомобили и мотоциклы');
INSERT INTO rt1 (id,f1) VALUES (2,'Автомобили и мотоциклы');
INSERT INTO rt1 (id,f1) VALUES (3,'Автомобили и мотоциклы');
INSERT INTO rt1 (id,f1) VALUES (4,'Мотоциклы и оборудование');
INSERT INTO rt1 (id,f1) VALUES (5,'Автомобили и мотоциклы');
INSERT INTO rt1 (id,f1) VALUES (6,'Автомобили и мотоциклы');
INSERT INTO rt1 (id,f1) VALUES (7,'Автомобили и мотоциклы');
INSERT INTO rt1 (id,f1) VALUES (8,'Автомобили и мотоциклы');
INSERT INTO rt1 (id,f1) VALUES (9,'Автомобили и мотоциклы');
INSERT INTO rt1 (id,f1) VALUES (10,'Автомобили и мотоциклы');
INSERT INTO rt1 (id,f1) VALUES (11,'Автомобили и мотоциклы');
INSERT INTO rt1 (id,f1) VALUES (12,'Автомобили и мотоциклы');
INSERT INTO rt1 (id,f1) VALUES (13,'Автомобили и мотоциклы');
INSERT INTO rt1 (id,f1) VALUES (14,'Автомобили и мотоциклы');
INSERT INTO rt1 (id,f1) VALUES (15,'Автомобили и мотоциклы');
INSERT INTO rt1 (id,f1) VALUES (16,'Автомобили и мотоциклы');
INSERT INTO rt1 (id,f1) VALUES (17,'Автомобили и мотоциклы');
INSERT INTO rt1 (id,f1) VALUES (18,'Автомобили и мотоциклы');
INSERT INTO rt1 (id,f1) VALUES (19,'Автомобили и мотоциклы');
INSERT INTO rt1 (id,f1) VALUES (20,'Мотоциклы и оборудование');
INSERT INTO rt1 (id,f1) VALUES (21,'Автомобили и мотоциклы');
INSERT INTO rt1 (id,f1) VALUES (22,'Автомобили и мотоциклы');
INSERT INTO rt1 (id,f1) VALUES (23,'Мотоциклы и оборудование');
INSERT INTO rt1 (id,f1) VALUES (24,'Автомобили и мотоциклы');
INSERT INTO rt1 (id,f1) VALUES (25,'Автомобили и мотоциклы');
INSERT INTO rt1 (id,f1) VALUES (26,'Автомобили и мотоциклы');
INSERT INTO rt1 (id,f1) VALUES (27,'Автомобили и мотоциклы');
INSERT INTO rt1 (id,f1) VALUES (28,'Автомобили и мотоциклы');
INSERT INTO rt1 (id,f1) VALUES (29,'Мотоциклы и оборудование');
INSERT INTO rt1 (id,f1) VALUES (30,'Автомобили и мотоциклы');
INSERT INTO rt1 (id,f1) VALUES (31,'Автомобили и мотоциклы');
INSERT INTO rt1 (id,f1) VALUES (32,'Автомобили и мотоциклы');
INSERT INTO rt1 (id,f1) VALUES (33,'Автомобили и мотоциклы');
INSERT INTO rt1 (id,f1) VALUES (34,'Автомобили и мотоциклы');
INSERT INTO rt1 (id,f1) VALUES (35,'Автомобили и мотоциклы');
INSERT INTO rt1 (id,f1) VALUES (36,'Автомобили и мотоциклы');
SELECT id, packedfactors() FROM rt1 WHERE MATCH('Мотоциклы') ORDER BY id ASC LIMIT 1 OPTION ranker=expr('bm25'), max_matches=4, threads=1;

FLUSH RAMCHUNK rt1;
SELECT id, packedfactors() FROM rt1 WHERE MATCH('Мотоциклы') ORDER BY id ASC LIMIT 1 OPTION ranker=expr('bm25'), max_matches=4, threads=1;
INSERT INTO rt1 (id,f1) VALUES (1001,'Автомобили и мотоциклы');
INSERT INTO rt1 (id,f1) VALUES (1002,'Автомобили и мотоциклы');
INSERT INTO rt1 (id,f1) VALUES (1003,'Автомобили и мотоциклы');
INSERT INTO rt1 (id,f1) VALUES (1004,'Мотоциклы и оборудование');
INSERT INTO rt1 (id,f1) VALUES (1005,'Автомобили и мотоциклы');
INSERT INTO rt1 (id,f1) VALUES (1006,'Автомобили и мотоциклы');
INSERT INTO rt1 (id,f1) VALUES (1007,'Автомобили и мотоциклы');
INSERT INTO rt1 (id,f1) VALUES (1008,'Автомобили и мотоциклы');
INSERT INTO rt1 (id,f1) VALUES (1009,'Автомобили и мотоциклы');
INSERT INTO rt1 (id,f1) VALUES (1010,'Автомобили и мотоциклы');
INSERT INTO rt1 (id,f1) VALUES (1011,'Автомобили и мотоциклы');
INSERT INTO rt1 (id,f1) VALUES (1012,'Автомобили и мотоциклы');
INSERT INTO rt1 (id,f1) VALUES (1013,'Автомобили и мотоциклы');
INSERT INTO rt1 (id,f1) VALUES (1014,'Автомобили и мотоциклы');
INSERT INTO rt1 (id,f1) VALUES (1015,'Автомобили и мотоциклы');
INSERT INTO rt1 (id,f1) VALUES (1016,'Автомобили и мотоциклы');
INSERT INTO rt1 (id,f1) VALUES (1017,'Автомобили и мотоциклы');
INSERT INTO rt1 (id,f1) VALUES (1018,'Автомобили и мотоциклы');
INSERT INTO rt1 (id,f1) VALUES (1019,'Автомобили и мотоциклы');
INSERT INTO rt1 (id,f1) VALUES (1020,'Мотоциклы и оборудование');
INSERT INTO rt1 (id,f1) VALUES (1021,'Автомобили и мотоциклы');
INSERT INTO rt1 (id,f1) VALUES (1022,'Автомобили и мотоциклы');
INSERT INTO rt1 (id,f1) VALUES (1023,'Мотоциклы и оборудование');
INSERT INTO rt1 (id,f1) VALUES (1024,'Автомобили и мотоциклы');
INSERT INTO rt1 (id,f1) VALUES (1025,'Автомобили и мотоциклы');
INSERT INTO rt1 (id,f1) VALUES (1026,'Автомобили и мотоциклы');
INSERT INTO rt1 (id,f1) VALUES (1027,'Автомобили и мотоциклы');
INSERT INTO rt1 (id,f1) VALUES (1028,'Автомобили и мотоциклы');
INSERT INTO rt1 (id,f1) VALUES (1029,'Мотоциклы и оборудование');
INSERT INTO rt1 (id,f1) VALUES (1030,'Автомобили и мотоциклы');
INSERT INTO rt1 (id,f1) VALUES (1031,'Автомобили и мотоциклы');
INSERT INTO rt1 (id,f1) VALUES (1032,'Автомобили и мотоциклы');
INSERT INTO rt1 (id,f1) VALUES (1033,'Автомобили и мотоциклы');
INSERT INTO rt1 (id,f1) VALUES (1034,'Автомобили и мотоциклы');
INSERT INTO rt1 (id,f1) VALUES (1035,'Автомобили и мотоциклы');
INSERT INTO rt1 (id,f1) VALUES (1036,'Автомобили и мотоциклы');
SELECT id, packedfactors() FROM rt1 WHERE MATCH('Мотоциклы') ORDER BY id DESC LIMIT 1 OPTION ranker=expr('bm25'), max_matches=4, threads=1;

</sphinxql></queries>

</test>
