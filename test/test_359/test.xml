<?xml version="1.0" encoding="utf-8"?>
<test>

<name>percolate query vs docs matched</name>
<skip_indexer/>
<requires>
	<force-rt/>
</requires>

<config>
searchd
{
	<searchd_settings/>
}

index pq
{
	type = percolate
	path			= <data_path/>/pq_re
	rt_field 		= title
	rt_attr_json	= json_data
}

index pq1
{
	type = percolate
	path			= <data_path/>/pq_1
	rt_field 		= title
	rt_field 		= content
	rt_attr_json	= json_data
	
    html_strip		= 1
    html_remove_elements = style, script
    charset_table 	= english
}

index pq2
{
	type = percolate
	path			= <data_path/>/pq_2
	rt_field 		= title
	rt_field 		= content
	rt_attr_json	= json_data
	
    html_strip		= 1
    html_remove_elements = style, script
    charset_table 	= english
	index_sp = 1
}

</config>

<queries><sphinxql>
TRUNCATE TABLE pq;
INSERT INTO pq (query, filters) VALUES ('', 'json_data.text.status.state=0');
INSERT INTO pq (query, filters) VALUES ('', 'json_data.text.status.favorited=\'false\'');
CALL PQ ('pq', ('{"id":21,"json_data":{"text":{"status":{"state":0}}}}'), 1 as docs, 1 as query, 'id' as docs_id);

<!-- docs missed due to zero counter from not matched stored query -->
TRUNCATE TABLE pq;
INSERT INTO pq (query, filters) VALUES ('', 'json_data.text.status.favorited=\'false\'');
INSERT INTO pq (query, filters) VALUES ('', 'json_data.text.status.state=0');
CALL PQ ('pq', ('{"id":21,"json_data":{"text":{"status":{"state":0}}}}'), 1 as docs, 1 as query, 'id' as docs_id);

TRUNCATE TABLE pq;
INSERT INTO pq (query, filters) VALUES ('', 'json_data.text.status.favorited=\'false\'');
INSERT INTO pq (query, filters) VALUES ('', 'json_data.text.status.staff=\'got some\'');
INSERT INTO pq (query, filters) VALUES ('', 'json_data.text.status.state=0');
CALL PQ ('pq', ('{"id":21,"json_data":{"text":{"status":{"state":0}}}}'), 1 as docs, 1 as query, 'id' as docs_id);

<!-- same for full-text path -->
TRUNCATE TABLE pq;
INSERT INTO pq (query, filters) VALUES ('test', 'json_data.text.status.state=0');
INSERT INTO pq (query, filters) VALUES ('test', 'json_data.text.status.favorited=\'false\'');
CALL PQ ('pq', ('{"id":21,"json_data":{"text":{"status":{"state":0}}}, "title":"test me"}'), 1 as docs, 1 as query, 'id' as docs_id);

TRUNCATE TABLE pq;
INSERT INTO pq (query, filters) VALUES ('test', 'json_data.text.status.favorited=\'false\'');
INSERT INTO pq (query, filters) VALUES ('test', 'json_data.text.status.state=0');
CALL PQ ('pq', ('{"id":21,"json_data":{"text":{"status":{"state":0}}}, "title":"test me"}'), 1 as docs, 1 as query, 'id' as docs_id);

TRUNCATE TABLE pq;
INSERT INTO pq (query, filters) VALUES ('test', 'json_data.text.status.favorited=\'false\'');
INSERT INTO pq (query, filters) VALUES ('test', 'json_data.text.status.staff=\'got some\'');
INSERT INTO pq (query, filters) VALUES ('test', 'json_data.text.status.state=0');
CALL PQ ('pq', ('{"id":21,"json_data":{"text":{"status":{"state":0}}}, "title":"test me"}'), 1 as docs, 1 as query, 'id' as docs_id);

<!-- regression - stripper alter field -->
INSERT INTO pq1 (query) VALUES ('@title c');
CALL PQ('pq1', ('{\"title\":\"a\",\"content\":\"c\"}'),1 as docs,1 as query);
CALL PQ('pq1', ('{\"content\":\"c\"}'),1 as docs,1 as query);
CALL PQ('pq1', ('{\"title\":\"c\"}'),1 as docs,1 as query);

<!-- regression - SENTENCE did not work at PQ -->
INSERT INTO pq2 (query) VALUES ('abc SENTENCE def');

CALL PQ('pq2', 'The abc? Def or not.', 0 as docs_json, 1 as query, 1 as docs);
CALL PQ('pq2', 'The abc or def is not.', 0 as docs_json, 1 as query, 1 as docs);
CALL PQ('pq2', 'abc? Def', 0 as docs_json, 1 as query, 1 as docs);

<!-- regression - daemon hung on recursive JSON attribute encoded as string -->
CALL PQ ('pq', ('{"id":21,"json_data":\"{\\"text\\":0}\"}'), 1 as docs, 1 as query, 'id' as docs_id);
SHOW WARNINGS;

</sphinxql></queries>

</test>
